from tvm import tir

def apply_trace(sch: tir.Schedule) -> None:
  b0 = sch.get_block(name="gemm", func_name="main")
  l1, l2, l3 = sch.get_loops(block=b0)
  v4, v5 = sch.sample_perfect_tile(loop=l1, n=2, max_innermost_factor=16, decision=[128, 16])
  v6, v7 = sch.sample_perfect_tile(loop=l2, n=2, max_innermost_factor=16, decision=[256, 8])
  v8, v9 = sch.sample_perfect_tile(loop=l3, n=2, max_innermost_factor=16, decision=[256, 8])
  l10, l11 = sch.split(loop=l1, factors=[None, v5], preserve_unit_iters=True, disable_predication=False)
  l12, l13 = sch.split(loop=l2, factors=[None, v7], preserve_unit_iters=True, disable_predication=False)
  l14, l15 = sch.split(loop=l3, factors=[None, v9], preserve_unit_iters=True, disable_predication=False)
  sch.reorder(l10, l12, l14, l11, l13, l15)
  sch.bind(loop=l10, thread_axis="blockIdx.x")
  sch.bind(loop=l12, thread_axis="blockIdx.y")
  b16 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared")
  l17, l18, l19, l20, l21, l22 = sch.get_loops(block=b0)
  sch.compute_at(block=b16, loop=l19, preserve_unit_loops=True, index=-1)
  b23 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared")
  l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b0)
  sch.compute_at(block=b23, loop=l26, preserve_unit_loops=True, index=-1)
  b30 = sch.get_block(name="gemm", func_name="main")
  l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b30)
  v37, v38 = sch.sample_perfect_tile(loop=l34, n=2, max_innermost_factor=16, decision=[16, 1])
  v39, v40 = sch.sample_perfect_tile(loop=l35, n=2, max_innermost_factor=16, decision=[2, 4])
  v41, v42 = sch.sample_perfect_tile(loop=l36, n=2, max_innermost_factor=16, decision=[4, 2])
  l43, l44 = sch.split(loop=l34, factors=[None, v38], preserve_unit_iters=True, disable_predication=False)
  l45, l46 = sch.split(loop=l35, factors=[None, v40], preserve_unit_iters=True, disable_predication=False)
  l47, l48 = sch.split(loop=l36, factors=[None, v42], preserve_unit_iters=True, disable_predication=False)
  sch.reorder(l43, l45, l47, l44, l46, l48)
  sch.bind(loop=l43, thread_axis="threadIdx.x")
  sch.bind(loop=l45, thread_axis="threadIdx.y")
  b49 = sch.cache_read(block=b30, read_buffer_index=0, storage_scope="local")
  l50, l51, l52, l53, l54, l55, l56, l57, l58 = sch.get_loops(block=b30)
  sch.compute_at(block=b49, loop=l55, preserve_unit_loops=True, index=-1)
  b59 = sch.cache_read(block=b30, read_buffer_index=1, storage_scope="local")
  l60, l61, l62, l63, l64, l65, l66, l67, l68 = sch.get_loops(block=b30)
  sch.compute_at(block=b59, loop=l65, preserve_unit_loops=True, index=-1)
  l69, l70, l71, l72, l73 = sch.get_loops(block=b16)
  l74 = sch.fuse(l72, l73, preserve_unit_iters=True)
  l75, l76, l77 = sch.split(loop=l74, factors=[None, v37, v39], preserve_unit_iters=True, disable_predication=False)
  sch.bind(loop=l76, thread_axis="threadIdx.x")
  sch.bind(loop=l77, thread_axis="threadIdx.y")
  l78, l79, l80, l81, l82 = sch.get_loops(block=b23)
  l83 = sch.fuse(l81, l82, preserve_unit_iters=True)
  l84, l85, l86 = sch.split(loop=l83, factors=[None, v37, v39], preserve_unit_iters=True, disable_predication=False)
  sch.bind(loop=l85, thread_axis="threadIdx.x")
  sch.bind(loop=l86, thread_axis="threadIdx.y")
  b87 = sch.get_block(name="gemm", func_name="main")
  l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b87)
  b97 = sch.cache_write(block=b87, write_buffer_index=0, storage_scope="local")
  sch.reverse_compute_at(block=b97, loop=l93, preserve_unit_loops=True, index=-1)
  b98 = sch.get_block(name="relu", func_name="main")
  b99 = sch.get_block(name="add", func_name="main")
  sch.reverse_compute_inline(block=b98)
  sch.reverse_compute_inline(block=b99)
  sch.enter_postproc()
  b100 = sch.get_block(name="gemm", func_name="main")
  l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b100)
  b110 = sch.decompose_reduction(block=b100, loop=l103)